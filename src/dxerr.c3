module d3d12;

import std::os;

const Win32_HRESULT DXGI_STATUS_OCCLUDED = 0x087A0001;
const Win32_HRESULT DXGI_STATUS_CLIPPED = 0x087A0002;
const Win32_HRESULT DXGI_STATUS_REDIRECTION = 0x087A0004;
const Win32_HRESULT DXGI_STATUS_NO_DESKTOP_ACCESS = 0x087A0005;
const Win32_HRESULT DXGI_STATUS_GRAPHICS_VIDPN_SOURCE_IN_USE = 0x087A0006;
const Win32_HRESULT DXGI_STATUS_MODE_CHANGED = 0x087A0007;
const Win32_HRESULT DXGI_STATUS_MODE_CHANGE_IN_PROGRESS = 0x087A0008;
const Win32_HRESULT DXGI_STATUS_UNOCCLUDED = 0x087A0009;
const Win32_HRESULT DXGI_STATUS_DDA_WAS_STILL_DRAWING = 0x087A000A;
const Win32_HRESULT DXGI_STATUS_PRESENT_REQUIRED = 0x087A002F;

const Win32_HRESULT DXGI_ERROR_ACCESS_DENIED = (int) 0x887A002B; faultdef DXGI_ACCESS_DENIED;
const Win32_HRESULT DXGI_ERROR_ACCESS_LOST = (int) 0x887A0026; faultdef DXGI_ACCESS_LOST;
const Win32_HRESULT DXGI_ERROR_ALREADY_EXISTS = (int) 0x887A0036; faultdef DXGI_ALREADY_EXISTS;
const Win32_HRESULT DXGI_ERROR_CANNOT_PROTECT_CONTENT = (int) 0x887A002A; faultdef DXGI_CANNOT_PROTECT_CONTENT;
const Win32_HRESULT DXGI_ERROR_DEVICE_HUNG = (int) 0x887A0006; faultdef DXGI_DEVICE_HUNG;
const Win32_HRESULT DXGI_ERROR_DEVICE_REMOVED = (int) 0x887A0005; faultdef DXGI_DEVICE_REMOVED;
const Win32_HRESULT DXGI_ERROR_DEVICE_RESET = (int) 0x887A0007; faultdef DXGI_DEVICE_RESET;
const Win32_HRESULT DXGI_ERROR_DRIVER_INTERNAL_ERROR = (int) 0x887A0020; faultdef DXGI_DRIVER_INTERNAL_ERROR;
const Win32_HRESULT DXGI_ERROR_FRAME_STATISTICS_DISJOINT = (int) 0x887A000B; faultdef DXGI_FRAME_STATISTICS_DISJOINT;
const Win32_HRESULT DXGI_ERROR_GRAPHICS_VIDPN_SOURCE_IN_USE = (int) 0x887A000C; faultdef DXGI_GRAPHICS_VIDPN_SOURCE_IN_USE;
const Win32_HRESULT DXGI_ERROR_INVALID_CALL = (int) 0x887A0001; faultdef DXGI_INVALID_CALL;
const Win32_HRESULT DXGI_ERROR_MORE_DATA = (int) 0x887A0003; faultdef DXGI_MORE_DATA;
const Win32_HRESULT DXGI_ERROR_NAME_ALREADY_EXISTS = (int) 0x887A002C; faultdef DXGI_NAME_ALREADY_EXISTS;
const Win32_HRESULT DXGI_ERROR_NONEXCLUSIVE = (int) 0x887A0021; faultdef DXGI_NONINCLUSIVE;
const Win32_HRESULT DXGI_ERROR_NOT_CURRENTLY_AVAILABLE = (int) 0x887A0022; faultdef DXGI_NOT_CURRENTLY_AVAILABLE;
const Win32_HRESULT DXGI_ERROR_NOT_FOUND = (int) 0x887A0002; faultdef DXGI_NOT_FOUND;
const Win32_HRESULT DXGI_ERROR_REMOTE_CLIENT_DISCONNECTED = (int) 0x887A0023; faultdef DXGI_REMOTE_CLIENT_DISCONNECTED;
const Win32_HRESULT DXGI_ERROR_REMOTE_OUTOFMEMORY = (int) 0x887A0024; faultdef DXGI_REMOTE_OUTOFMEMORY;
const Win32_HRESULT DXGI_ERROR_RESTRICT_TO_OUTPUT_STALE = (int) 0x887A0029; faultdef DXGI_RESTRICT_TO_OUTPUT_STALE;
const Win32_HRESULT DXGI_ERROR_SDK_COMPONENT_MISSING = (int) 0x887A002D; faultdef DXGI_SDK_COMPONENT_MISSING;
const Win32_HRESULT DXGI_ERROR_SESSION_DISCONNECTED = (int) 0x887A0028; faultdef DXGI_SESSION_DISCONNECTED;
const Win32_HRESULT DXGI_ERROR_UNSUPPORTED = (int) 0x887A0004; faultdef DXGI_UNSUPPORTED;
const Win32_HRESULT DXGI_ERROR_WAIT_TIMEOUT = (int) 0x887A0027; faultdef DXGI_WAIT_TIMEOUT;
const Win32_HRESULT DXGI_ERROR_WAS_STILL_DRAWING = (int) 0x887A000A; faultdef DXGI_WAS_STILL_DRAWING;
const Win32_HRESULT DXGI_ERROR_HW_PROTECTION_OUTOFMEMORY = (int) 0x887A0030; faultdef DXGI_HW_PROTECTION_OUTOFMEMORY;
const Win32_HRESULT DXGI_ERROR_MODE_CHANGE_IN_PROGRESS = (int) 0x887A0025; faultdef DXGI_MODE_CHANGE_IN_PROGRESS;

const Win32_HRESULT DXGI_DDI_ERR_WASSTILLDRAWING = (int) 0x887B0001; faultdef DXGI_DDI_WASSTILLDRAWING;
const Win32_HRESULT DXGI_DDI_ERR_UNSUPPORTED = (int) 0x887B0002; faultdef DXGI_DDI_UNSUPPORTED;
const Win32_HRESULT DXGI_DDI_ERR_NONEXCLUSIVE = (int) 0x887B0003; faultdef DXGI_DDI_NONEXCLUSIVE;

const Win32_HRESULT D3D10_ERROR_TOO_MANY_UNIQUE_STATE_OBJECTS = (int) 0x88790001; faultdef D3D10_TOO_MANY_UNIQUE_STATE_OBJECTS;
const Win32_HRESULT D3D10_ERROR_FILE_NOT_FOUND = (int) 0x88790002; faultdef D3D10_FILE_NOT_FOUND;

const Win32_HRESULT D3D11_ERROR_TOO_MANY_UNIQUE_STATE_OBJECTS = (int) 0x887C0000; faultdef D3D11_TOO_MANY_UNIQUE_STATE_OBJECTS;
const Win32_HRESULT D3D11_ERROR_FILE_NOT_FOUND = (int) 0x887C0002; faultdef D3D11_FILE_NOT_FOUND;
const Win32_HRESULT D3D11_ERROR_TOO_MANY_UNIQUE_VIEW_OBJECTS = (int) 0x887C0003; faultdef D3D11_TOO_MANY_UNIQUE_VIEW_OBJECTS;
const Win32_HRESULT D3D11_ERROR_DEFERRED_CONTEXT_MAP_WITHOUT_INITIAL_DISCARD = (int) 0x887C0000; faultdef D3D11_DEFERRED_CONTEXT_MAP_WITHOUT_INITIAL_DISCARD;

const Win32_HRESULT D3D12_ERROR_ADAPTER_NOT_FOUND = (int) 0x887E0001; faultdef D3D12_ADAPTER_NOT_FOUND;
const Win32_HRESULT D3D12_ERROR_DRIVER_VERSION_MISMATCH = (int) 0x887E0002; faultdef D3D12_DRIVER_VERSION_MISMATCH;

const Win32_HRESULT D2DERR_WRONG_STATE = (int) 0x88990001; faultdef D2D_WRONG_STATE;
const Win32_HRESULT D2DERR_NOT_INITIALIZED = (int) 0x88990002; faultdef D2D_NOT_INITIALIZED;
const Win32_HRESULT D2DERR_UNSUPPORTED_OPERATION = (int) 0x88990003; faultdef D2D_UNSUPPORTED_OPERATION;
const Win32_HRESULT D2DERR_SCANNER_FAILED = (int) 0x88990004; faultdef D2D_SCANNER_FAILED;
const Win32_HRESULT D2DERR_SCREEN_ACCESS_DENIED = (int) 0x88990005; faultdef D2D_SCREEN_ACCESS_DENIED;
const Win32_HRESULT D2DERR_DISPLAY_STATE_INVALID = (int) 0x88990006; faultdef D2D_DISPLAY_STATE_INVALID;
const Win32_HRESULT D2DERR_ZERO_VECTOR = (int) 0x88990007; faultdef D2D_ZERO_VECTOR;
const Win32_HRESULT D2DERR_INTERNAL_ERROR = (int) 0x88990008; faultdef D2D_INTERNAL_ERROR;
const Win32_HRESULT D2DERR_DISPLAY_FORMAT_NOT_SUPPORTED = (int) 0x88990009; faultdef D2D_DISPLAY_FORMAT_NOT_SUPPORTED;
const Win32_HRESULT D2DERR_INVALID_CALL = (int) 0x8899000A; faultdef D2D_INVALID_CALL;
const Win32_HRESULT D2DERR_NO_HARDWARE_DEVICE = (int) 0x8899000B; faultdef D2D_NO_HARDWARE_DEVICE;
const Win32_HRESULT D2DERR_RECREATE_TARGET = (int) 0x8899000C; faultdef D2D_RECREATE_TARGET;
const Win32_HRESULT D2DERR_TOO_MANY_SHADER_ELEMENTS = (int) 0x8899000D; faultdef D2D_TOO_MANY_SHADER_ELEMENTS;
const Win32_HRESULT D2DERR_SHADER_COMPILE_FAILED = (int) 0x8899000E; faultdef D2D_SHADER_COMPILE_FAILED;
const Win32_HRESULT D2DERR_MAX_TEXTURE_SIZE_EXCEEDED = (int) 0x8899000F; faultdef D2D_MAX_TEXTURE_SIZE_EXCEEDED;
const Win32_HRESULT D2DERR_UNSUPPORTED_VERSION = (int) 0x88990010; faultdef D2D_UNSUPPORTED_VERSION;
const Win32_HRESULT D2DERR_BAD_NUMBER = (int) 0x88990011; faultdef D2D_BAD_NUMBER;
const Win32_HRESULT D2DERR_WRONG_FACTORY = (int) 0x88990012; faultdef D2D_WRONG_FACTORY;
const Win32_HRESULT D2DERR_LAYER_ALREADY_IN_USE = (int) 0x88990013; faultdef D2D_LAYER_ALREADY_IN_USE;
const Win32_HRESULT D2DERR_POP_CALL_DID_NOT_MATCH_PUSH = (int) 0x88990014; faultdef D2D_POP_CALL_DID_NOT_MATCH_PUSH;
const Win32_HRESULT D2DERR_WRONG_RESOURCE_DOMAIN = (int) 0x88990015; faultdef D2D_WRONG_RESOURCE_DOMAIN;
const Win32_HRESULT D2DERR_PUSH_POP_UNBALANCED = (int) 0x88990016; faultdef D2D_PUSH_POP_UNBALANCED;
const Win32_HRESULT D2DERR_RENDER_TARGET_HAS_LAYER_OR_CLIPRECT = (int) 0x88990017; faultdef D2D_RENDER_TARGET_HAS_LAYER_OR_CLIPRECT;
const Win32_HRESULT D2DERR_INCOMPATIBLE_BRUSH_TYPES = (int) 0x88990018; faultdef D2D_INCOMPATIBLE_BRUSH_TYPES;
const Win32_HRESULT D2DERR_WIN32_ERROR = (int) 0x88990019; faultdef D2D_WIN32_ERROR;
const Win32_HRESULT D2DERR_TARGET_NOT_GDI_COMPATIBLE = (int) 0x8899001A; faultdef D2D_TARGET_NOT_GDI_COMPATIBLE;
const Win32_HRESULT D2DERR_TEXT_EFFECT_IS_WRONG_TYPE = (int) 0x8899001B; faultdef D2D_TEXT_EFFECT_IS_WRONG_TYPE;
const Win32_HRESULT D2DERR_TEXT_RENDERER_NOT_RELEASED = (int) 0x8899001C; faultdef D2D_TEXT_RENDERER_NOT_RELEASED;
const Win32_HRESULT D2DERR_EXCEEDS_MAX_BITMAP_SIZE = (int) 0x8899001D; faultdef D2D_EXCEEDS_MAX_BITMAP_SIZE;

fn void? dxgi_hr_checker(Win32_HRESULT hr)
{
    switch (hr)
    {
    case DXGI_ERROR_ACCESS_DENIED: return DXGI_ACCESS_DENIED?;
    case DXGI_ERROR_ACCESS_LOST: return DXGI_ACCESS_LOST?;
    case DXGI_ERROR_ALREADY_EXISTS: return DXGI_ALREADY_EXISTS?;
    case DXGI_ERROR_CANNOT_PROTECT_CONTENT: return DXGI_CANNOT_PROTECT_CONTENT?;
    case DXGI_ERROR_DEVICE_HUNG: return DXGI_DEVICE_HUNG?;
    case DXGI_ERROR_DEVICE_REMOVED: return DXGI_DEVICE_REMOVED?;
    case DXGI_ERROR_DEVICE_RESET: return DXGI_DEVICE_RESET?;
    case DXGI_ERROR_DRIVER_INTERNAL_ERROR: return DXGI_DRIVER_INTERNAL_ERROR?;
    case DXGI_ERROR_FRAME_STATISTICS_DISJOINT: return DXGI_FRAME_STATISTICS_DISJOINT?;
    case DXGI_ERROR_GRAPHICS_VIDPN_SOURCE_IN_USE: return DXGI_GRAPHICS_VIDPN_SOURCE_IN_USE?;
    case DXGI_ERROR_INVALID_CALL: return DXGI_INVALID_CALL?;
    case DXGI_ERROR_MORE_DATA: return DXGI_MORE_DATA?;
    case DXGI_ERROR_NAME_ALREADY_EXISTS: return DXGI_NAME_ALREADY_EXISTS?;
    case DXGI_ERROR_NONEXCLUSIVE: return DXGI_NONINCLUSIVE?;
    case DXGI_ERROR_NOT_CURRENTLY_AVAILABLE: return DXGI_NOT_CURRENTLY_AVAILABLE?;
    case DXGI_ERROR_NOT_FOUND: return DXGI_NOT_FOUND?;
    case DXGI_ERROR_REMOTE_CLIENT_DISCONNECTED: return DXGI_REMOTE_CLIENT_DISCONNECTED?;
    case DXGI_ERROR_REMOTE_OUTOFMEMORY: return DXGI_REMOTE_OUTOFMEMORY?;
    case DXGI_ERROR_RESTRICT_TO_OUTPUT_STALE: return DXGI_RESTRICT_TO_OUTPUT_STALE?;
    case DXGI_ERROR_SDK_COMPONENT_MISSING: return DXGI_SDK_COMPONENT_MISSING?;
    case DXGI_ERROR_SESSION_DISCONNECTED: return DXGI_SESSION_DISCONNECTED?;
    case DXGI_ERROR_UNSUPPORTED: return DXGI_UNSUPPORTED?;
    case DXGI_ERROR_WAIT_TIMEOUT: return DXGI_WAIT_TIMEOUT?;
    case DXGI_ERROR_WAS_STILL_DRAWING: return DXGI_WAS_STILL_DRAWING?;
    case DXGI_ERROR_HW_PROTECTION_OUTOFMEMORY: return DXGI_HW_PROTECTION_OUTOFMEMORY?;
    case DXGI_ERROR_MODE_CHANGE_IN_PROGRESS: return DXGI_MODE_CHANGE_IN_PROGRESS?;
    case DXGI_DDI_ERR_WASSTILLDRAWING: return DXGI_DDI_WASSTILLDRAWING?;
    case DXGI_DDI_ERR_UNSUPPORTED: return DXGI_DDI_UNSUPPORTED?;
    case DXGI_DDI_ERR_NONEXCLUSIVE: return DXGI_DDI_NONEXCLUSIVE?;
    case D3D10_ERROR_TOO_MANY_UNIQUE_STATE_OBJECTS: return D3D10_TOO_MANY_UNIQUE_STATE_OBJECTS?;
    case D3D10_ERROR_FILE_NOT_FOUND: return D3D10_FILE_NOT_FOUND?;
    case D3D11_ERROR_TOO_MANY_UNIQUE_STATE_OBJECTS: return D3D11_TOO_MANY_UNIQUE_STATE_OBJECTS?;
    case D3D11_ERROR_FILE_NOT_FOUND: return D3D11_FILE_NOT_FOUND?;
    case D3D11_ERROR_TOO_MANY_UNIQUE_VIEW_OBJECTS: return D3D11_TOO_MANY_UNIQUE_VIEW_OBJECTS?;
    case D3D12_ERROR_ADAPTER_NOT_FOUND: return D3D12_ADAPTER_NOT_FOUND?;
    case D3D12_ERROR_DRIVER_VERSION_MISMATCH: return D3D12_DRIVER_VERSION_MISMATCH?;
    case D2DERR_WRONG_STATE: return D2D_WRONG_STATE?;
    case D2DERR_NOT_INITIALIZED: return D2D_NOT_INITIALIZED?;
    case D2DERR_UNSUPPORTED_OPERATION: return D2D_UNSUPPORTED_OPERATION?;
    case D2DERR_SCANNER_FAILED: return D2D_SCANNER_FAILED?;
    case D2DERR_SCREEN_ACCESS_DENIED: return D2D_SCREEN_ACCESS_DENIED?;
    case D2DERR_DISPLAY_STATE_INVALID: return D2D_DISPLAY_STATE_INVALID?;
    case D2DERR_ZERO_VECTOR: return D2D_ZERO_VECTOR?;
    case D2DERR_INTERNAL_ERROR: return D2D_INTERNAL_ERROR?;
    case D2DERR_DISPLAY_FORMAT_NOT_SUPPORTED: return D2D_DISPLAY_FORMAT_NOT_SUPPORTED?;
    case D2DERR_INVALID_CALL: return D2D_INVALID_CALL?;
    case D2DERR_NO_HARDWARE_DEVICE: return D2D_NO_HARDWARE_DEVICE?;
    case D2DERR_RECREATE_TARGET: return D2D_RECREATE_TARGET?;
    case D2DERR_TOO_MANY_SHADER_ELEMENTS: return D2D_TOO_MANY_SHADER_ELEMENTS?;
    case D2DERR_SHADER_COMPILE_FAILED: return D2D_SHADER_COMPILE_FAILED?;
    case D2DERR_MAX_TEXTURE_SIZE_EXCEEDED: return D2D_MAX_TEXTURE_SIZE_EXCEEDED?;
    case D2DERR_UNSUPPORTED_VERSION: return D2D_UNSUPPORTED_VERSION?;
    case D2DERR_BAD_NUMBER: return D2D_BAD_NUMBER?;
    case D2DERR_WRONG_FACTORY: return D2D_WRONG_FACTORY?;
    case D2DERR_LAYER_ALREADY_IN_USE: return D2D_LAYER_ALREADY_IN_USE?;
    case D2DERR_POP_CALL_DID_NOT_MATCH_PUSH: return D2D_POP_CALL_DID_NOT_MATCH_PUSH?;
    case D2DERR_WRONG_RESOURCE_DOMAIN: return D2D_WRONG_RESOURCE_DOMAIN?;
    case D2DERR_PUSH_POP_UNBALANCED: return D2D_PUSH_POP_UNBALANCED?;
    case D2DERR_RENDER_TARGET_HAS_LAYER_OR_CLIPRECT: return D2D_RENDER_TARGET_HAS_LAYER_OR_CLIPRECT?;
    case D2DERR_INCOMPATIBLE_BRUSH_TYPES: return D2D_INCOMPATIBLE_BRUSH_TYPES?;
    case D2DERR_WIN32_ERROR: return D2D_WIN32_ERROR?;
    case D2DERR_TARGET_NOT_GDI_COMPATIBLE: return D2D_TARGET_NOT_GDI_COMPATIBLE?;
    case D2DERR_TEXT_EFFECT_IS_WRONG_TYPE: return D2D_TEXT_EFFECT_IS_WRONG_TYPE?;
    case D2DERR_TEXT_RENDERER_NOT_RELEASED: return D2D_TEXT_RENDERER_NOT_RELEASED?;
    case D2DERR_EXCEEDS_MAX_BITMAP_SIZE: return D2D_EXCEEDS_MAX_BITMAP_SIZE?;
    default:
        break;    
    }
}

fn void __install_dxgi_hr_checker() @init(1000)
{
    FaultChecker* dx_checker = mem::new(FaultChecker);
    dx_checker.checker = &dxgi_hr_checker;
    dx_checker.next = g_next_checker;
    g_next_checker = dx_checker;
}
